-- CP Series Control Plugin for Q-SYS
-- by James Puig / james.puig@dolby.com
-- Febr '20

PluginInfo = 
{
   Name = "Dolby~CP Series Control",
    Version = "2.2",
    BuildVersion = "2.2.0.1",
    Id = "349d7196-f9b3-4293-8571-6d81ea6971da",
    Description = "QSys Control Plugin for Dolby CP Series Cinema Processors",
    Manufacturer = "Dolby",
    Author = "James Puig - james.puig@dolby.com",
}

  -- setmeta for tables --
   	
  function setmeta(table) 
    local function searchelem(table,index) local m = getmetatable(table)
    local list = m.__table or table for count,elem in pairs(list) do
      for key,value in pairs(elem)  do if elem == table then if index=="index" then return count end 
        if index=="key" then return key end if index=="value" then return value end end 
        if key == index then if index~="state" then return elem end return nil end end end 
    error("variable '"..index.."' is not declared", 2) end
    local m = getmetatable(table) or {} setmetatable(table,m)
    m.__index = searchelem m = {}  m.__index = searchelem  m.__table = table
    for _,elem in pairs(table) do setmetatable(elem,m)  end end

	-- Constants  --
	
	Model = { {CP650='CP 650'},{CP750='CP 750'},{CP850='CP 850'} }		
	setmeta(Model)

	local ButtonLabel = { {'01','04','05','10','11','U1','U2','NS'},
					  {'Dig1','Dig2','Dig3','Dig4','Ana','NS','Mic'},
					  { '1','2','3','4','5','6','7','8' } }	
	
 -- Control Functions
 
function GetColor(props)
    return {0,127,255 }
end

function GetPrettyName(props)
    return "Dolby "..props.Model.Value.." Control"
end

function GetProperties()
	local props = {} 
	local list = {}
	for _,elem in pairs(Model) do
		table.insert(list,elem.value) 
	end
   	table.insert(props, { Name="Model" ,Type = "enum",Choices = list, Value = Model.CP850.value})
   	table.insert(props, { Name="TCP Log" ,Type = "enum",Choices = { 'Command', 'All' }, Value = 'Command' })
 	return props
end

function RectifyProperties(props) 
   props["TCP Log"].IsHidden = not props.plugin_show_debug.Value	
  return props 
end

function GetComponents(props)
	return { 
    	{   
      		Name = "Step",
      		Type = "stepper", 
      		Properties = 
      		{
      		    control_type = 2,   
      			num_steps = 100,
      		}
    	},
 	}	
end

function GetControls(props)
   local numButtons = props.Model.Value == Model.CP750.value and 7 or 8
 	return {
		{ Name = "start" },	
		{ Name = "ref",ControlType = "Button",ButtonType = "Momentary"},	
 		{ Name = "level",ControlType = "Text",UserPin = true,PinStyle = "Both"},
  		{ Name = "gain",ControlType = "Knob",ControlUnit = "dB",Min = -100,Max =  20,UserPin=true, PinStyle = "Both"},		  			
		{ Name = "increase",ControlType = "Button",ButtonType = "Momentary",IconType="Icon",Icon="Plus", IconColor={0,0,0} },	  			
		{ Name = "decrease",ControlType = "Button",ButtonType = "Momentary",IconType="Icon",Icon="Minus",IconColor={0,0,0} },	  			
 		{ Name="address", ControlType="Text",Count=1, UserPin=false },
    	{ Name = "status", ControlType="Indicator", IndicatorType="Status", UserPin=true, PinStyle='Output' },
    	{ Name = "status.led", ControlType="Indicator", IndicatorType="Status" },
    	{ Name = "refresh", ControlType="Button", ButtonType = "Trigger", Icon='Refresh'},   
		{ Name = "select", ControlType = "Text",UserPin = true,PinStyle='Both' },
    	{ Name = "selector", ControlType="Button", ButtonType="Toggle", Count=numButtons,UserPin = true,PinStyle='Both' },
    	{ Name = "mute", ControlType="Button", ButtonType="Toggle", Icon ='Volume Strike', UserPin=true, PinStyle='Both', },
	} 
end

function GetControlLayout(props)
	local layout = {}
	local graphics = {}
	local col = 70
	local row = 6
	local gutter = 50
    local numButtons = props.Model.Value == Model.CP750.value and 7 or 8
	table.insert(graphics, { Type="GroupBox", CornerRadius=5, Fill={255,245,232,255}, StrokeWidth = 1, StrokeColor = {241,199,245}, Position={-5,-5}, Size={358,368}, Padding=0, Margin=0 })
	table.insert(graphics, { Type="Label", Text=props.Model.Value, Fill={255,245,232,255}, Size={ 160,28 }, Position={ 46+gutter,row}, IsBold = true, FontSize=24 }) 
    row = row + 40
	table.insert(graphics, { Type = "Text", HTextAlign="Right", Text = "IP:", Position={ gutter, row }, Size={ 44,16 } })
	layout['address'] = { PrettyName='Address', Position={gutter+50,row}, Size={ 140,16 } }
	layout['refresh'] = { PrettyName='Refresh Connection', FontStyle='Black', Position={gutter+190,row}, Size={ 36,16 }, Margin=0, }  
    row = row+32
	table.insert(graphics, { Type="GroupBox", HTextAlign="Left", Text="Status", StrokeWidth=1, CornerRadius=8, Position={ 10, row-5 }, Size={ 330,64} })
	layout['status.led'] = { PrettyName='CP Status', Style="Led",  Margin=3, Position={gutter-14,row+22}, Size={ 16,16 } } 
	layout['status'] = { PrettyName='CP Status', Position={gutter+10,row+14}, Size={ 262,32 } } 
    row = row+48+24
	local left= 0
	local top = row
	layout['ref'] = { PrettyName = "Ref Level", Style = "Button", ButtonStype = "Momentary", Color = {242,137,174}, Size={36,16}, Position = {left+26,top+48}, }
	layout['level'] = { PrettyName='Dolby Level', Style = "Knob", Color = {0,226,113}, Position = { left+90, top+28}, Size={36,36}, }
	layout['increase'] = { PrettyName = "Increase", Style = "Button", ButtonStype = "Momentary", Color = {255,255,255}, Position={left+154,top+28}, Size={36,16}, } 
	layout['decrease'] = { PrettyName = "decrease", Style = "Button", ButtonStype = "Momentary", Color = {255,255,255}, Size={36,16}, Position={left+154,top+48 }, } 
	layout["gain"] =	{ PrettyName = "Gain", Style = "Knob", Position={left+214,top + 28 }, Size = { 36,36 }, } 
	layout['mute'] = { PrettyName='Mute', CornerRadius=20, Color={255,0,0}, UnlinkOffColor=true, OffColor={100,100,100}, Padding=10, Radius=5, Position={left+214+64,top + 22 }, Size={46,46} } 
	table.insert(graphics, { Type="GroupBox", Text="Level", HTextAlign="Left", StrokeWidth=1, CornerRadius=8, Position={left+10,top+8}, Size={330,100}, }) 
	table.insert(graphics, { Type="Label", Text="Reference", Position={left+12,top+72}, Size={64,16}, }) 
	table.insert(graphics,	{ Type="Label", Text="Dolby\nLevel", Position={left+76, top+72}, Size={64,32}, }) 
	table.insert(graphics,	{ Type="Label", Text="Inc/Dec", Position={left+140, top + 72}, Size={64,16}, }) 
	table.insert(graphics,	{ Type="Label", Text="RMS Level (dBFS)", Position={left+202,top+72}, Size={64,32}, }) 
	table.insert(graphics,	{ Type="Label", Text="Mute", Position={left+202+64,top+72}, Size={64,32}, })
	row = row + 130
	table.insert(graphics, { Type="Text", Text="Format:", HTextAlign = "Right", Position={ gutter-46, row+1 }, Size={ 90,16 } }) 
	layout['select']= { PrettyName='Select', Style='ComboBox', TextFontSize=12, Position={gutter+50,row}, Size={170,18} } 
    row = row+32 col = 36
    local btnLayout,macro,proc
    local assign = {
    	[Model.CP650.value] = function() macro = 'Button' proc=Model.CP650.index btnLayout = ButtonLabel[1] end,
        [Model.CP750.value] = function() macro = 'Button' proc=Model.CP750.index btnLayout = ButtonLabel[2] end,             
        [Model.CP850.value] = function() macro = 'Macro'  proc=Model.CP850.index btnLayout = ButtonLabel[3] end
    }	assign[props.Model.Value]()  
	local v = props.Model.Value ==  Model.CP750.value and gutter or gutter-20
   	for i = 1,numButtons do 
		layout['selector '..i]={ PrettyName= macro ..'~'..ButtonLabel[proc][i], Legend = btnLayout[i], Position={v,row}, 
				Color={0,255,0}, FontStyle='Bold', fontSize=14, CornerRadius=20, ButtonStyle="On", Size={36,36} } 
		v = v+col
 	end
    return layout, graphics
end

if not Controls and Reflect then return end

require "CPSeries"
